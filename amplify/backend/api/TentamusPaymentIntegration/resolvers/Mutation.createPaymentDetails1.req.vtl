#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )

## Retrieve Secrets from AWS Secrets Manager
#set( $secretsManager = $util.aws.sdk.Amplify.createSecretsManagerClient() )
#set( $secretName = "Tentamus_Payment_Integration" )

#set( $getSecretValueRequest = {
  "SecretId": $secretName
} )

#set( $secretValueResponse = $secretsManager.getSecretValue($getSecretValueRequest) )
#set( $secret = $secretValueResponse.secretString )
#set( $secretJson = $util.parseJson($secret) )

## Extract the required values from the secret
#set( $SecretValue1 = $secretJson.OdataUsername )
#set( $SecretValue2 = $secretJson.OdataPassword )

## Add the secret values to the mergedValues
$util.qr($mergedValues.put("SecretValue1", $SecretValue1))
$util.qr($mergedValues.put("SecretValue2", $SecretValue2))

## Set other default values
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
$util.qr($mergedValues.put("__typename", "PaymentDetails"))

## Continue with the existing resolver logic
#set( $PutObject = {
  "version": "2018-05-29",
  "operation": "PutItem",
  "attributeValues": $util.dynamodb.toMapValues($mergedValues),
  "condition": $condition
} )

#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end

## Begin - key condition
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put("keyCondition$velocityCount", {
      "attributeExists": false
    }))
    $util.qr($keyConditionExprNames.put("#keyCondition$velocityCount", "$entry.key"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
    "id": {
        "attributeExists": false
    }
  }))
#end

## End - key condition
## Start condition block
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
    "and": $ctx.stash.conditions
  } )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
      "expression": $Conditions.expression,
      "expressionNames": $Conditions.expressionNames
    } )
  #end
  ## End condition block
#end

#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put("condition", $Conditions))
#end

#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put("key", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
    "id": $util.dynamodb.toDynamoDB($mergedValues.id)
  } )
  $util.qr($PutObject.put("key", $Key))
#end

$util.toJson($PutObject)
